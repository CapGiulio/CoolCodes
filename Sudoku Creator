# The greedy algorithm is a simple approach to solve optimization problems
# We iteratively propose a change in the structure of the problem, and we accept it if improves the situation (in this case, if we get closer to a valid sudoku)

import numpy as np

def greedy(probl, repeats = 1, num_iters = 10, seed = None, debug_delta_cost = False):      
    if seed is not None:
        np.random.seed(seed)
    best_probl = None
    best_c = np.inf
    for step in range(repeats):
        probl.init_config()
        c = probl.cost()
        last_accepted_t = 0 
        for t in range(num_iters):
            move = probl.propose_move()
            delta_c = probl.compute_delta_cost(move)
            if debug_delta_cost:
                probl_copy = probl.copy()
                probl_copy.accept_move(move)
                assert abs(c + delta_c - probl_copy.cost()) < 1e-10
            if delta_c <= 0:
                probl.accept_move(move)
                c += delta_c
                last_accepted_t = t
        print(f"final cost of run {step} = {c} [obtained at t={last_accepted_t}]")
        if c < best_c:
            best_c = c
            best_probl = probl.copy()
    best_probl.display()
    print(f"best cost = {best_c}")
    return best_probl


