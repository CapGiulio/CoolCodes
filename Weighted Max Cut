# We start with a graph (represented by an adjacency matrix).
# The maximum cut of a graph is a cut (so a partition of its vertices) whose size is at least the size of any other cut. 
# We can see it as the problem of dividing the vertices of the graph into two complementary sets such that the edges between the two sets is as large as possible.


import numpy as np
from copy import deepcopy

class WeightedMaxCut:
    def __init__(self, init, seed=None):
        if not (isinstance(init, int) or isinstance(init, np.ndarray)):
            raise Exception("init must be an integer or a 2-d array")

        if seed is not None:
            np.random.seed(seed)

        if isinstance(init, int):
            n = init
            if n <= 0:
                raise Exception("n must be positive")
            init = np.random.rand(n,n)
            for i in range(n-1):
                for j in range(i+1, n):
                    init[i,j] = init[j,i]
            for i in range(n):
                init[i,i] = 0.0
        assert isinstance(init, np.ndarray)

        if init.ndim != 2:
            raise Exception("The init array must be 2-dimensional")
        n = init.shape[0]
        if init.shape[1] != n:
            raise Exception("The init array must be square")
        if not np.array_equal(init, init.T):
            raise Exception("The init array must be symmetric")
        if (init < 0).any():
            raise Exception("The init array elements must be non-negative")
        if (init.diagonal() != 0).any():
            raise Exception("The diagonal entries of the init array must be 0")

        self.n = n
        self.weights = init
        mask = np.random.rand(n) < 0.5
        cut = 2 * mask - 1
        self.cut = cut

    def init_config(self):
        n = self.n
        mask = np.random.rand(n) < 0.5
        self.cut[:] = 2 * mask - 1

    def cost(self):
        n, weights, cut = self.n, self.weights, self.cut
        c = 0.0
        setA = np.arange(n)[cut > 0]
        setB = np.arange(n)[cut < 0]
        for i in setA:
            for j in setB:
                c += weights[i,j]
        return -c

    def propose_move(self):
        n = self.n
        return np.random.randint(n)

    def accept_move(self, move):
        i = move
        cut = self.cut
        cut[i] *= -1

    def compute_delta_cost(self, move):
        i = move
        weights, cut = self.weights, self.cut
        oldv = cut[i]
        delta_cost = -oldv * np.sum(weights[i, :] * cut)
        return delta_cost

    def copy(self):
        return deepcopy(self)

    def __repr__(self):
        return "MaxCut:\n" + \
               "  weights=\n" + str(self.weights) + "\n" + \
               "  cut=" + str(self.cut)
               
    def display(self):
        print(self)


mxc = WeightedMaxCut(50, seed=678678)

best = simulated_annealing(mxc, mcmc_steps=10**4, seed=58473625,
                     beta0=0.1, beta1=10.0, anneal_steps=20)    # the code for simulated_annealing is saved as another file in this same repository
