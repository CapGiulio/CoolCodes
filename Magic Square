# A magic square is a matrix such that the sum of the numbers of each row, each column, and each of the two main diagonals are the same


import numpy as np
from copy import deepcopy
import collections


def cost1(a, s):
    return abs(a.sum() - s)

def cost2(s1, s):
    return abs(s1 - s)


repetitioncost = 2
class MagicSquare:
    def __init__(self, n, s, seed=None):
        if not isinstance(n, int) or n <= 0:
            raise Exception("n must be a positive integer")
        if not isinstance(s, int):
            raise Exception("s must be an int")
        if seed is not None:
            np.random.seed(seed)
        self.n = n
        self.s = s
        self.init_config()

    def init_config(self):
        n, s = self.n, self.s
        self.table = np.random.randint(1, s+1, (n,n))
        self.rsums = self.table.sum(axis=1)
        self.csums = self.table.sum(axis=0)
        self.d1sum = self.table.ravel()[::n+1].sum()
        self.d2sum = self.table.ravel()[n-1:n**2-1:n-1].sum()
        self.count = collections.Counter(self.table.ravel())

    def cost(self):
        n, s = self.n, self.s
        table = self.table
        c_r = 0
        for row in table:
            c_r += cost1(row, s)
        assert c_r == sum([cost2(rs, s) for rs in self.rsums])
        c_c = 0
        for col in table.T:
            c_c += cost1(col, s)
        assert c_c == sum([cost2(cs, s) for cs in self.csums])
        c_d1 = cost1(table.ravel()[::n+1], s)
        c_d2 = cost1(table.ravel()[n-1:n**2-1:n-1], s)
        assert c_d1 == cost2(self.d1sum, s)
        assert c_d2 == cost2(self.d2sum, s)
        c_count = n**2 - len(self.count)
        c = c_r + c_c + c_d1 + c_d2 + repetitioncost * c_count
        return c

    def propose_move(self):
        n = self.n
        table = self.table

        while True:
            i, j = np.random.randint(n), np.random.randint(n)

            oldv = table[i,j]
            if oldv == 1:
                if np.random.rand() < 0.5: 
                    continue
                delta = 1
            else:
                delta = 2 * np.random.randint(2) - 1
            break
        newv = oldv + delta
        return (i, j, newv)

    def compute_delta_cost(self, move):
        i, j, newv = move
        n, s = self.n, self.s
        table, count = self.table, self.count
        rsums, csums = self.rsums, self.csums
        d1sum, d2sum = self.d1sum, self.d2sum
        oldv = table[i,j]
        delta = newv - oldv
        rsi = rsums[i]
        csj = csums[j]
        oldc_r = cost2(rsi, s)
        oldc_c = cost2(csj, s)
        if i == j:
            oldc_d1 = cost2(d1sum, s)
        else:
            oldc_d1 = 0
        if i + j == n - 1:
            oldc_d2 = cost2(d2sum, s)
        else:
            oldc_d2 = 0
        oldc_count = n**2 - len(count)
        oldc = oldc_r + oldc_c + oldc_d1 + oldc_d2 + repetitioncost * oldc_count
        count[oldv] -= 1
        if count[oldv] == 0:
            del count[oldv]
        count[newv] += 1
        newc_r = cost2(rsi + delta, s)
        newc_c = cost2(csj + delta, s)
        if i == j:
            newc_d1 = cost2(d1sum + delta, s)
        else:
            newc_d1 = 0
        if i == n - j - 1:
            newc_d2 = cost2(d2sum + delta, s)
        else:
            newc_d2 = 0
        newc_count = n**2 - len(count)
        newc = newc_r + newc_c + newc_d1 + newc_d2 + repetitioncost * newc_count
        delta_c = newc - oldc
        count[oldv] += 1
        count[newv] -= 1
        if count[newv] == 0:
            del count[newv]
        return delta_c

    def accept_move(self, move):
        i, j, newv = move
        table, count = self.table, self.count
        rsums, csums = self.rsums, self.csums
        oldv = table[i,j]
        delta = newv - oldv
        table[i,j] = newv
        count[oldv] -= 1
        if count[oldv] == 0:
            del count[oldv]
        count[newv] += 1
        rsums[i] += delta
        csums[j] += delta
        if i == j:
            self.d1sum += delta
        if i + j == self.n - 1:
            self.d2sum += delta

    def copy(self):
        return deepcopy(self)

    def __repr__(self):
        s = f"MagicSquare:\n{self.table}\n"
        s += f"target = {self.s}\n"
        s += f"row sums = {self.rsums}\n"
        s += f"col sums = {self.csums}\n"
        s += f"diag sums = {self.d1sum}, {self.d2sum}"
        return s


msq = MagicSquare(6, 150, seed=789)

best = simulated_annealing(msq, mcmc_steps=5*10**4, seed=266,
                     beta0=1.0, beta1=2.0, anneal_steps=30)   # this function is saved in this same repository in the "Simulated Annealing" file

np.set_printoptions(threshold=np.inf)
print(f"final best configuration:\n{best}\ncost={best.cost()}")

if best.cost() == 0:
    print("FOUND A VALID ASSIGNMENT")
else:
    print("NOT SOLVED")
